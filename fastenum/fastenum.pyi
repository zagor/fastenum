import collections
from typing import Any, Iterator, SupportsIndex, Tuple, Type

class EnumMeta(type):
	@classmethod
	def __prepare__(mcs, cls: type, bases: Tuple[type, ...]) -> dict[str, Any]: ...  # type: ignore[override]
	def __new__(mcs, cls: str, bases: Tuple[type, ...], classdict: dict[str, Any]) -> EnumMeta: ...
	def __call__(cls, value: Any) -> Enum: ...  # type: ignore[override]
	def __getitem__(cls, name: str) -> Enum: ...
	def __iter__(cls) -> Iterator['Enum']: ...
	def __reversed__(cls) -> Iterator['Enum']: ...
	def __len__(cls) -> int: ...

class Enum(metaclass = EnumMeta):
	def __hash__(self) -> int: ...
	def __format__(self, format_spec: str) -> str: ...
	def __reduce_ex__(self, proto: SupportsIndex) -> Tuple[Type['Enum'], Tuple[Any]]: ...
	def __init__(self, value: Any) -> None: ...
	def name(self) -> str: ...
	def value(self) -> Any: ...
